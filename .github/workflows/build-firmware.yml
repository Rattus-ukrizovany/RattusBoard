name: Build RattusBoard Firmware

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering from the Actions tab
permissions:
  contents: write
jobs:
  build-firmware:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi
        pip3 install qmk
        qmk --version

    - name: Clone VIAL-QMK repository
      run: |
        git clone https://github.com/vial-kb/vial-qmk.git vial-qmk
        cd vial-qmk
        git submodule update --init --recursive

    - name: Set up VIAL-QMK environment
      run: |
        qmk config user.qmk_home=$(pwd)/vial-qmk

    - name: Copy RattusBoard keyboard files to VIAL-QMK
      run: |
        cp -r keyboards/rattusboard vial-qmk/keyboards/
        ls -la vial-qmk/keyboards/rattusboard/
        echo "‚úÖ RattusBoard keyboard files copied to VIAL-QMK successfully"

    - name: Compile firmware
      run: |
        echo "=== Compiling RattusBoard firmware using VIAL-QMK ==="
        echo "QMK Version: $(qmk --version)"
        echo ""
        echo "Keyboard files in vial-qmk/keyboards/rattusboard/:"
        ls -la vial-qmk/keyboards/rattusboard/
        echo ""
        
        # Set working directory to VIAL-QMK
        cd vial-qmk
        
        # Compile the VIAL firmware
        echo "=== Compiling VIAL firmware ==="
        if qmk compile -kb rattusboard -km vial; then
          echo "‚úÖ VIAL firmware compilation successful!"
        else
          echo "‚ùå VIAL firmware compilation failed"
          exit 1
        fi
        
        echo "Searching for generated .uf2 files..."
        find . -name "*.uf2" -type f -exec ls -la {} \;

    - name: Find and copy all UF2 firmware files
      run: |
        echo "=== Searching for all compiled .uf2 firmware files ==="
        mkdir -p firmware-output
        
        # Search for .uf2 files in VIAL-QMK directory and log what we find
        echo "Searching in VIAL-QMK directory for .uf2 files..."
        UF2_FILES=$(find vial-qmk -name "*.uf2" -type f 2>/dev/null || true)
        
        if [ -n "$UF2_FILES" ]; then
          echo "Found .uf2 files:"
          echo "$UF2_FILES"
          echo "Copying all .uf2 files to firmware-output/"
          find vial-qmk -name "*.uf2" -type f -exec cp {} firmware-output/ \;
        else
          echo "No .uf2 files found in VIAL-QMK directory"
        fi
        
        echo "=== Final firmware-output directory contents ==="
        ls -la firmware-output/
        
        # Count and log what we have
        UF2_COUNT=$(find firmware-output/ -name "*.uf2" -type f | wc -l)
        echo "Total .uf2 files collected: $UF2_COUNT"
        
        if [ "$UF2_COUNT" -gt 0 ]; then
          echo "Successfully collected firmware files:"
          find firmware-output/ -name "*.uf2" -type f
        else
          echo "WARNING: No .uf2 firmware files were collected"
        fi

    - name: Upload firmware artifacts (all .uf2 files)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rattusboard-firmware
        path: firmware-output/*
        if-no-files-found: warn
        retention-days: 30

    - name: Artifact upload summary
      if: always()
      run: |
        echo "=== Artifact Upload Summary ==="
        if [ -d firmware-output/ ]; then
          FILE_COUNT=$(find firmware-output/ -type f | wc -l)
          UF2_COUNT=$(find firmware-output/ -name "*.uf2" -type f | wc -l)
          echo "üìÅ Total files in firmware-output/: $FILE_COUNT"
          echo "üîß UF2 firmware files: $UF2_COUNT"
          
          if [ "$UF2_COUNT" -gt 0 ]; then
            echo "‚úÖ Firmware files ready for release:"
            find firmware-output/ -name "*.uf2" -type f -exec basename {} \;
          else
            echo "‚ö†Ô∏è  No .uf2 files available for release"
          fi
        else
          echo "‚ùå No firmware-output directory found"
        fi

  release-firmware:
    needs: build-firmware
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download firmware artifact
      uses: actions/download-artifact@v4
      with:
        name: rattusboard-firmware
        path: firmware-artifacts/

    - name: Comprehensive firmware diagnostics
      run: |
        echo "=== Comprehensive Firmware Diagnostics ==="
        echo "Current working directory: $(pwd)"
        echo "Directory contents:"
        ls -la .
        
        echo ""
        echo "=== firmware-artifacts/ directory analysis ==="
        if [ -d firmware-artifacts/ ]; then
          echo "firmware-artifacts/ exists. Contents:"
          find firmware-artifacts/ -type f -exec ls -la {} \;
          echo ""
          echo "All files in firmware-artifacts/:"
          find firmware-artifacts/ -type f
          echo ""
          echo "UF2 files in firmware-artifacts/:"
          find firmware-artifacts/ -name "*.uf2" -type f || echo "No .uf2 files found"
        else
          echo "firmware-artifacts/ directory does not exist"
        fi
        
        echo ""
        echo "=== File type analysis ==="
        find firmware-artifacts/ -type f -exec file {} \; 2>/dev/null || echo "No files to analyze"

    - name: Check for any UF2 firmware files
      id: check_firmware
      run: |
        echo "=== Checking for UF2 firmware files ==="
        
        # Find all .uf2 files in firmware-artifacts/
        UF2_FILES=$(find firmware-artifacts/ -name "*.uf2" -type f 2>/dev/null || true)
        UF2_COUNT=$(echo "$UF2_FILES" | grep -c . 2>/dev/null || echo "0")
        
        echo "Found $UF2_COUNT .uf2 files"
        
        if [ -n "$UF2_FILES" ] && [ "$UF2_COUNT" -gt 0 ]; then
          echo "firmware_found=true" >> $GITHUB_OUTPUT
          echo "uf2_count=$UF2_COUNT" >> $GITHUB_OUTPUT
          
          # Create a properly formatted file list for release assets
          echo "uf2_files<<EOF" >> $GITHUB_OUTPUT
          echo "$UF2_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ SUCCESS: Firmware files found and ready for release:"
          echo "$UF2_FILES" | while read -r file; do
            if [ -n "$file" ]; then
              echo "  - $(basename "$file") ($(ls -lh "$file" | awk '{print $5}'))"
            fi
          done
        else
          echo "firmware_found=false" >> $GITHUB_OUTPUT
          echo "uf2_count=0" >> $GITHUB_OUTPUT
          echo "‚ùå No UF2 firmware files found."
          echo ""
          echo "=== Debugging information ==="
          echo "Searched in: firmware-artifacts/"
          echo "All files found:"
          find firmware-artifacts/ -type f 2>/dev/null || echo "No files found"
          echo ""
          echo "Reasons a release might be skipped:"
          echo "1. Firmware compilation failed in the build job"
          echo "2. QMK configuration issues prevented .uf2 generation"
          echo "3. File permissions or path issues during artifact upload/download"
          echo "4. The firmware was built but not saved to the expected output directory"
        fi

    - name: Create Release and Upload All Firmware Files
      if: steps.check_firmware.outputs.firmware_found == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "build-${{ github.sha }}"
        name: "RattusBoard Firmware Build ${{ github.sha }}"
        body: |
          ## RattusBoard VIAL Firmware Release

          Automatically generated VIAL firmware build from commit [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}).

          **üì¶ This release contains ${{ steps.check_firmware.outputs.uf2_count }} firmware file(s)**

          ### Installation Instructions
          1. Download the `rattusboard_vial.uf2` file from the assets below.
          2. Hold BOOTSEL and plug in USB on each Pico to enter bootloader mode.
          3. Drag the `.uf2` onto the RPI-RP2 drive for both halves.
          4. Connect halves with TRRS cable and plug USB into the left half.

          ### About VIAL Firmware
          This firmware is built using the official VIAL-QMK repository and provides:
          - **Live keymap editing** using the VIAL app (get.vial.today)
          - **No reflashing required** for keymap changes
          - **All QMK features** plus VIAL-specific enhancements

          ### Features
          - Split keyboard support with auto hand detection
          - PMW3360 trackball integration (right half)
          - Rotary encoder support (right half)
          - VIAL configuration support
          - Full QMK feature set

          For detailed setup instructions, see the [README](https://github.com/${{ github.repository }}#-firmware-flashing--split-setup-important-clarification).
        files: firmware-artifacts/*.uf2
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log successful release
      if: steps.check_firmware.outputs.firmware_found == 'true'
      run: |
        echo "‚úÖ SUCCESS: Release created successfully!"
        echo "üì¶ Release tag: build-${{ github.sha }}"
        echo "üìÅ Files attached: ${{ steps.check_firmware.outputs.uf2_count }} firmware file(s)"
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/build-${{ github.sha }}"

    - name: Log release skipped with detailed diagnostics
      if: steps.check_firmware.outputs.firmware_found != 'true'
      run: |
        echo "‚ùå RELEASE SKIPPED: No firmware files available for release"
        echo ""
        echo "=== Detailed Diagnostics ==="
        echo "üîç Trigger event: ${{ github.event_name }}"
        echo "üåø Branch/ref: ${{ github.ref }}"
        echo "üíæ Commit SHA: ${{ github.sha }}"
        echo ""
        echo "=== Troubleshooting Steps ==="
        echo "1. Check the build-firmware job logs for compilation errors"
        echo "2. Verify QMK configuration in keyboards/rattusboard/"
        echo "3. Ensure the keyboard configuration is valid and can compile"
        echo "4. Check if the firmware files were generated but not uploaded correctly"
        echo ""
        echo "=== Current Artifact Contents ==="
        echo "Files found in firmware-artifacts/:"
        find firmware-artifacts/ -type f -exec ls -la {} \; 2>/dev/null || echo "No files found"
        echo ""
        echo "=== Next Steps ==="
        echo "‚Ä¢ Fix any compilation errors in the build job"
        echo "‚Ä¢ Ensure QMK setup is correct for the rattusboard keyboard"
        echo "‚Ä¢ Verify that .uf2 files are being generated and copied to firmware-output/"
        echo "‚Ä¢ Check that the artifact upload/download process is working correctly"
